declare void @exit(i32)
declare i32 @printf(i8*, ...)

@.int_specifier = internal constant [4 x i8] c"%d\0A\00"
define void @printi(i32) {call i32 (i8*, ...) @printf(i8* getelementptr ([4 x i8], [4 x i8]* @.int_specifier, i32 0, i32 0), i32 %0) ret void}

@.str_specifier = internal constant [3 x i8] c"%s\00"
define void @print(i8*) {call i32 (i8*, ...) @printf(i8* getelementptr ([3 x i8], [3 x i8]* @.str_specifier, i32 0, i32 0), i8* %0) ret void}

@.str11 = internal constant [32 x i8] c"Error out of set range. Op: in\0A\00"

define void  @main(){
entry:
%t1 = insertvalue {i32, i32, i32, [256 x i1]} undef, i32 0, 0
%t2 = insertvalue {i32, i32, i32, [256 x i1]} %t1, i32 220, 1
%t3 = insertvalue {i32, i32, i32, [256 x i1]} %t2, i32 0, 2
%t0 = insertvalue {i32, i32, i32, [256 x i1]} %t3, [256 x i1] zeroinitializer, 3
%v4 = alloca {i32, i32, i32, [256 x i1]}, align 4
store {i32, i32, i32, [256 x i1]} %t0, {i32, i32, i32, [256 x i1]}* %v4, align 4
br label %label0_statementsNext
label0_statementsNext:
%t5 = add i32 220, 0
%t6 = load {i32, i32, i32, [256 x i1]}, {i32, i32, i32, [256 x i1]}* %v4, align 4
%t7 = extractvalue {i32, i32, i32, [256 x i1]} %t6, 0
%t8 = extractvalue {i32, i32, i32, [256 x i1]} %t6, 1
%t9 = icmp sgt i32 %t7, %t5
br i1 %t9, label %label1_outOfRangeError, label %label2_maybeInRange
label2_maybeInRange:
%t10 = icmp slt i32 %t8, %t5
br i1 %t10, label %label1_outOfRangeError, label %label3_inRange
label1_outOfRangeError:
%str_ptr11 = getelementptr [32 x i8], [32 x i8]* @.str11, i32 0, i32 0
call void (i8*) @print(i8* %str_ptr11 )
call void (i32) @exit(i32 0)
unreachable
label3_inRange:
%t12 = extractvalue {i32, i32, i32, [256 x i1]} %t6, 3
%t13 = extractvalue {i32, i32, i32, [256 x i1]} %t6, 0
%t14 = sub i32 %t5, %t13
%t15 = alloca [256 x i1]
store [256 x i1] %t12, [256 x i1]* %t15
%t16 = getelementptr [256 x i1], [256 x i1]* %t15, i1 0, i32 %t14
%t17 = load i1, i1* %t16
br i1 %t17, label %label4_IfTrue, label %label5_IfFalse
label4_IfTrue:
br label %label6_assignBool
label5_IfFalse:
br label %label6_assignBool
label6_assignBool:
%t18 = phi i32 [1, %label4_IfTrue], [0, %label5_IfFalse]
%v19 = alloca i32, align 4
store i32 %t18, i32* %v19, align 4
br label %label7_statementsNext
label7_statementsNext:
%t20 = icmp eq i32 , 1
br i1 %t20, label @, label @
%t21 = add i32 0, 0
%t22 = add i32 , %t21
call void @printi(i32 %t22 )
br label %label8_statementsNext
label8_statementsNext:
ret void
}

