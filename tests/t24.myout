declare void @exit(i32)
declare i32 @printf(i8*, ...)

@.int_specifier = internal constant [4 x i8] c"%d\0A\00"
define void @printi(i32) {call i32 (i8*, ...) @printf(i8* getelementptr ([4 x i8], [4 x i8]* @.int_specifier, i32 0, i32 0), i32 %0) ret void}

@.str_specifier = internal constant [3 x i8] c"%s\00"
define void @print(i8*) {call i32 (i8*, ...) @printf(i8* getelementptr ([3 x i8], [3 x i8]* @.str_specifier, i32 0, i32 0), i8* %0) ret void}


define i32  @kiv(i32 ){
entry:
%v0 = alloca i32, align 4
store i32 %0, i32* %v0, align 4
%t1 = load i32, i32* %v0, align 4
ret i32  %t1
}

define void  @main(){
entry:
%t2 = add i32 1, 0
%t3 = add i32 2, 0
%t4 = add i32 %t2, %t3
%t5 = add i32 4, 0
%t6 = icmp slt i32 %t4, %t5
br i1 %t6, label %label0_IfTrue, label %label1_IfFalse
label0_IfTrue:
br label %label2_assignBool
label1_IfFalse:
br label %label2_assignBool
label2_assignBool:
%t7 = phi i32 [1, %label0_IfTrue], [0, %label1_IfFalse]
%v8 = alloca i32, align 4
store i32 %t7, i32* %v8, align 4
br label %label3_statementsNext
label3_statementsNext:
%t9 = icmp eq i32 , 1
br i1 %t9, label %label4_enterIfCode, label %label5_statementsNext
label4_enterIfCode:
%t10 = add i32 69, 0
%t11 = call i32  @kiv(i32 %t10 )
call void @printi(i32 %t11 )
br label %label5_statementsNext
label5_statementsNext:
ret void
}

